name: 'PR Auto Labeler'
description: 'Automatically label pull requests based on code changes and metadata analysis'
author: 'ddjain'
branding:
  icon: 'tag'
  color: 'blue'
inputs:
  enabled_rules:
    description: 'List of rule names to enable (JSON array). All rules disabled by default. Example: ["ui-change", "env-change"]'
    required: false
    default: '[]'
  label_overrides:
    description: 'Custom label names to override defaults (JSON object). Example: {"ui-change":"frontend"}'
    required: false
    default: '{}'
  large_pr_threshold:
    description: 'Number of changed lines considered a large PR'
    required: false
    default: '500'
  enable_debug:
    description: 'Enable debug logs in workflow output'
    required: false
    default: 'false'
runs:
  using: 'composite'
  steps:
    - name: Analyze changes and apply labels
      uses: actions/github-script@v7
      env:
        ENABLED_RULES: ${{ inputs.enabled_rules }}
        ENABLE_DEBUG: ${{ inputs.enable_debug }}
        LABEL_OVERRIDES: ${{ inputs.label_overrides }}
        LARGE_PR_THRESHOLD: ${{ inputs.large_pr_threshold }}
      with:
        script: |
          // Fetch the workflow script from pr-auto-labeler repository
          // Use the action's version tag if available, otherwise fall back to main
          const actionRef = process.env.GITHUB_ACTION_REF || 
                           process.env.GITHUB_REF_NAME || 
                           process.env.GITHUB_REF?.replace('refs/tags/', '')?.replace('refs/heads/', '') ||
                           'main';
          
          const { data: scriptFile } = await github.rest.repos.getContent({
            owner: 'workflow-kit',
            repo: 'pr-auto-labeler',
            path: 'src/workflow-script.js',
            ref: actionRef
          });
          
          // Decode and execute the script
          const scriptContent = Buffer.from(scriptFile.content, 'base64').toString('utf-8');
          const workflowModule = {};
          const moduleFunction = new Function('exports', 'module', 'github', 'context', 'core', scriptContent + '\nreturn module.exports;');
          const workflowScript = moduleFunction({}, workflowModule, github, context, core);
          
          // Execute the workflow script
          await workflowScript({ github, context, core });

